[{"title":"网络传输过程","url":"/2019/12/14/网络传输过程/","content":"\n#### 协议三要素\n\n- **语法**，一段内容要符合一定的规则和格式。\n\n- **语义**，一段内容要代表某种意义。\n- **顺序**，一段内容要有执行顺序。\n\n#### 网络传输过程\n\n1. 输入url，浏览器通过域名系统DNS(Domain Name System)解析获得目标IP地址，获取到目标IP地址之后就开始打包请求，一般采用HTTP或HTTPS协议，即在应用层，打包完成交给下一层\n\n2. 通过socket编程，请求到了传输层，传输层主要有两种协议，一种是无连接的协议**UDP**，一种是面向连接的协议**TCP**。TCP协议里面会有两个端口，一个是浏览器监听的端口，一个是目标服务器监听的端口。操作系统往往通过端口来判断，它得到的包应该给哪个进程。\n\n3. 传输层封装完毕之后，浏览器会将包交给操作系统的**网络层**。网络层的协议是IP协议。在IP协议里面会有源IP地址，即浏览器所在机器的IP地址和目标IP地址。操作系统通过IP地址判断，是局域网IP还是外网IP，如果不在不跟本机在同一段IP地址，会把请求交给网关，通过ARP协议获取网关MAC地址，发送到外网的数据需要携带网关MAC地址。（ARP攻击）\n\n4. 于是操作系统将IP包交给了下一层，也就是**MAC层**。网卡再将包发出去。由于这个包里面是有MAC地址的，因而它能够到达网关。网关收到包之后，通过**路由协议**（常用的有**OSPF**和**BGP**）,找到目标网关地址。\n\n   ![avatar](01.png)\n\n\n找到目标网关之后，通过ARP协议获取目标服务器MAC地址网络包过关后，通过这个MAC地址就能找到目标服务器。目标服务器发现MAC地址对上了，取下MAC头来，发送给操作系统的网络层。发现IP也对上了，就取下IP头。IP头里会写上一层封装的是TCP协议，然后将其交给传输层，即**TCP层**。\n\n在这一层里，对于收到的每个包，都会有一个回复的ACK包说明收到了。这个回复的包绝非这次请求的结果，而仅仅是TCP层的一个说明，即收到之后的回复。\n\n如果发送端没有收到回复，发送端的TCP层会重新发送这个包，还是上面的过程，直到有一天收到平安到达的回复。**这个重试绝非你的浏览器重新将下单这个动作重新请求一次**。对于浏览器来讲，就发送了一次下单请求，TCP层不断自己闷头重试。除非TCP这一层出了问题，例如连接断了，才轮到浏览器的应用层重新发送下单请求。\n\n当网络包平安到达TCP层之后，TCP头中有目标端口号，通过这个端口号，可以找到目标网站的进程正在监听这个端口号。通过RPC框架告诉相关进程，执行成功返回HTTP/HTTPS包，最终展示到用户浏览器上。\n\n![avatar](02.png)\n\n#### 一个问题\n\nQ：当网络包到达一个网关的时候，可以通过路由表得到下一个网关的IP地址，直接通过IP地址找就可以了，为什么还要通过本地的MAC地址呢？\n\nA：IP地址确定位置，MAC地址确定身份。IP是网络层使用的MAC是链路层使用的，IP包最终还是要通过物理链接和MAC地址进行交互的。","tags":["计算机网络"]},{"title":"Ubuntu18.04配置shadowsocks","url":"/2019/12/03/Ubuntu18-04配置shadowsocks/","content":"\n#### 更新软件源\n\n```bash\n$ sudo apt update\n```\n\n#### 安装python-pip\n\n```bash\n$ sudo apt install python3\n$ sudo apt install python3-pip\n```\n\n#### 安装shadowsocks\n\n```bash\n$ sudo pip3 install shadowsocks\n```\n\n#### 配置shadowsocks\n\n```bash\n$ sudo vim /etc/shadowsocks.json\n```\n\n```json\n{ \n\n\"server\":\"代理服务器ip\",\n\n\"server_port\":代理服务器端口,\n\n\"password\":\"代理服务器访问密码\",  \n\n\"local_address\":\"127.0.0.1\", \n\n\"local_port\":1080, \n\n\"timeout\":600, \n\n\"method\":\"aes-256-cfb\" // 加密方式，注意shadowsocks版本支持\n\n}\n```\n\n#### 启动shadowsocks\n\n```bash\n$ sudo sslocal -c /etc/shadowsocks.json -d -start\n```\n\n> EVP_CIPHER_CTX_cleanup报错解决方法：\n>\n> 找到 /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py 文件进行修改，\n>\n> 用vim 或 gedit 命令行都行：\n>\n> 此处以 shadowsocks-2.8.2的版本为例，其他版本自行在文件中搜索\n>\n> 1、将第52行\n>\n> libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)\n>\n> 改为\n>\n> libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)\n>\n> 2、将第111行\n>\n> libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)\n>\n> 改为\n>\n> libcrypto.EVP_CIPHER_CTX_reset(self._ctx)\n\n#### 安装GenPAC\n\n```bash\n$ sudo pip install genpac\n$ pip install —-upgrade genpac\n$ genpac --pac-proxy \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=\"autoproxy.pac\"\n```\n\n找到下载下来的 autoproxy.pac文件，然后进入：设置—网络—网络代理，选择手动，URL 指向该文件路径即可，url 格式为：\n\nfile:///home/{user}/autoproxy.pac\n\n({user}替换成自己的用户)\n\n#### 安装privoxy\n\n```bash\n$ sudo apt install privoxy\n```\n\n配置privoxy\n\n```bash\n$ sudo gedit /etc/privoxy/config\n```\n\n打开文件找到4.1节 listen-address，找到#listen-address 127.0.0.1:8118，取消注释\n\n![avatar](01-01.jpeg)\n\n找到5.2节forward-socks4, forward-socks4a, forward-socks5 and forward-socks5t，\n\n找到#forward-socks5t / 127.0.0.1:9050 .（后面的.很重要，端口值改成1080即可）\n\n![avatar](01-02.jpeg)\n\n再修改~/.bashrc\n\n```bash\n$ sudo gedit ~/.bashrc\n```\n\n打开文件后，加入：\n\n```bash\nexport http_proxy=\"127.0.0.1:8118\"\n\nexport https_proxy=\"127.0.0.1:8118\"\n\nexport ftp_proxy=\"127.0.0.1:8118\"\n```\n\n#### 配置git代理\n\n```bash\n$ git config --global http.proxy 'socks5://127.0.0.1:1080' \n$ git config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n#### 配置开机自启动\n\n```bash\n$ sudo touch /etc/rc.local\n$ sudo chmod 755 /etc/rc.local\n```\n\n编辑文件，添加以下内容\n\n```bash\n#!/bin/bash\nsudo sslocal -c /etc/shadowsocks.json -d start\nsudo /etc/init.d/privoxy start\n```\n\nreboot！","tags":["配置"]},{"title":"Hello World","url":"/2019/10/15/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]